#!/bin/bash
shopt -u sourcepath
jirac_dir=$(dirname "$0")

source "$jirac_dir"/core_functions.sh
source "$jirac_dir"/ui_functions.sh


jirac_banner_print

# default values
print_mode="0"

# FIXME: Export this snippet in a method. Not successful now
while getopts ":n:p:" opt; do
    case $opt in
        n)
            if [ $OPTARG -gt 0 ]; then
                echo "and it's positive"
                number_of_commit=$OPTARG
            else
                jirac_help
                exit 1
            fi
            ;;
        p)
            print_mode="$OPTARG"
            jirac_verify_print_mode
            ;;
        \?)
            jirac_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

echo -ne "# \033[7mDEPENDENCY CHECK...\033[m "

if [[ $OSTYPE == darwin* ]]; then
        jirac_check_dependency pbcopy
elif [[ $OSTYPE == msys ]]; then
        jirac_check_dependency clip
        jirac_check_dependency mktemp
else
        jirac_check_dependency xclip
fi

for dependency in git sed `xml_parser`; do
	jirac_check_dependency $dependency
done

echo
echo

echo -ne "# \033[7mCONFIGURATION CHECK...\033[m "


create_editor_variable

echo " OK!"
echo

echo -e "# \033[7mQUESTION TIME!\033[m"

# project folder

root_dir=$(jirac_get_git_project_root_directory)

if [[ -d $root_dir && -f "${root_dir}/pom.xml" ]]; then
	project_path=$root_dir
	project_pom="$root_dir/pom.xml"
	project_git_location="$root_dir/.git"
	branch=$(jirac_get_git_current_remote_branch)
else
    jirac_log INFO "To run jirac please move inside your maven project on which you want to comment a commit."
fi

# sanity checks

if [ ! -f  "$project_pom" ]; then
	jirac_log ERROR "No POM file found in the project directory. Aborting."
    	exit 1
fi

if [ ! -d "$project_git_location" ]; then
    	jirac_log ERROR "The provided directory is not a git repository. Aborting."
    	exit 1
fi

jirac_log INFO "Project root directory: $project_path"
echo

# version

echo "## Grabbing Maven name, artifact version and SCM URL... "

project=$(jirac_get_maven_project_name "$project_pom")
project_version=$(jirac_get_maven_version "$project_pom")
gitlab_base_url=$(jirac_get_scm_url "$project_pom")
if [ "$gitlab_base_url" = "" ]; then
	gitlab_base_url=$(jirac_get_connection_url "$project_pom")
fi

if [ -z "$project_version" ]; then
	echo "no version found!"
	jirac_log ERROR "Either you don't follow a semantic versioning scheme or this is not a Maven project. Aborting."
	exit 1

elif [ -z "$project" ]; then
	echo "no project name found!"
	jirac_log ERROR "Please check <name> is present in your POM"
	exit 1

elif [ -z "$gitlab_base_url" ]; then
	echo "no SCM URL found!"
	jirac_log ERROR "Please make a section <scm><connection> is present in your POM"
	exit 1
else
	echo " OK!"
	jirac_log INFO "version: $project_version"
	jirac_log INFO "SCM URL: $gitlab_base_url"
	jirac_log INFO "name: $project"
	echo ""
fi


# branch
while [ -z "$branch" ]; do
    jirac_log INFO "Your branch has no upstream set, please choose another one:"
    jirac_select Branch "git branch -r" $project_git_location
    branch=$answer
done

# commits
author=$(git config user.name)

if [ -n "$number_of_commit" ];then
    short_hashes=$(git --git-dir="${project_git_location}" log -"$number_of_commit" --committer="${author}" --format=%h $branch)
else
    echo -e "## Which commit \033[1mSHA1s\033[m?"
    while [ -z "$short_hashes" ]; do
        temp_file=$(jirac_mktemp)

        echo "# Select a commit by prepending 'x ' (without quotes)" > "$temp_file"
        git --git-dir="${project_git_location}" log -10  --committer="${author}" --format='%h %s' $branch >> "$temp_file"
        eval "$editor" "$temp_file"
        short_hashes="$(awk '/^x / { print $2 }' "$temp_file")"
    done
fi

echo ""
echo -e "## \033[7mFINAL RESULT...\033[m"


temp_clip=$(jirac_mktemp)

#TODO: real clean template
echo "
*$project*
* branche   : $branch
* version   : $project_version" > "$temp_clip"
if [ "$print_mode" = "0" ]; then
    echo "* commit(s) :" >> "$temp_clip"
    for hash in $short_hashes; do
        complete_sha1=$(git --git-dir="$project_git_location" log --format="%H" $hash -1)
        echo "** $gitlab_base_url/commit/$complete_sha1" >> "$temp_clip"

        # compute description
        msg=$(jirac_get_git_full_message "$project_git_location" $sha)"\n"
        default_description="${default_description}$msg"
    done

    # description override
    read -p "## Override description (y/n/skip)? " -n 1 -r
    echo ""
    if [[ $REPLY == "Y" || $REPLY == "y" ]]; then
        while [ -z "$description" ]; do
            echo -ne "\t... which is? "
            read description
        done
    elif [[ $REPLY == "S" || $REPLY == "s" ]]; then
        description=''
    else
        description=$default_description
    fi

    # append description
    if [ -n "${description}" ]; then
        echo -e "* Description:" >> "$temp_clip"
        echo -e "${description}" | awk -f "$jirac_dir"/preserve_paragraphs.awk >> "$temp_clip"
    fi
elif [[ "$print_mode" = "1" ]]; then
    # reverse list of commits to print them oldest first
    short_hashes=$(echo $short_hashes | tac --separator=" ")
    for hash in $short_hashes; do
        complete_sha1=$(git --git-dir="$project_git_location" log --format="%H" $hash -1)
        echo "* $(jirac_get_git_subject "$project_git_location" $complete_sha1)" >> "$temp_clip"
        echo "** $gitlab_base_url/commit/$complete_sha1" >> "$temp_clip"
        echo -e "** " >> "$temp_clip"
        echo -e "$(jirac_get_git_body "$project_git_location" $complete_sha1)\n" | awk -f "$jirac_dir"/preserve_paragraphs.awk >> "$temp_clip"
    done
fi

jirac_copy_to_clipboard "$temp_clip"

jirac_victorious_print
